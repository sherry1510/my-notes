
命令行：cd d:  进入到d盘目录下。cd 文件夹1/文件夹2 进入到文件夹2目录下。cd ..退出当前文件夹

githup官网：https://githup.com

git 是一个工具（例如：firebug也是个调试），作用：版本控制

githup  网站，社交平台，开源项目，也是（远程仓库）

svn与git的区别：

1，svn是集成式，每个人需要连接中央服务器，才能开发协作。如果中央服务器崩溃，或者本地代码删除，没法恢复

2，git是分布式的，每个开发人员的电脑都有自己的版本库（本地仓库），不需要连接中央服务器（远程仓库）

git 工具下载

Git Bash是命令行操作界面，来操作控制项目

步骤1：在githup上面创建一个项目。此时是远程仓库上有这个项目

步骤2：打开git Bash,进入指定的文件夹，例如:第一步 cd e: (进e盘)    第二步 cd 文件夹1

步骤3：调用 git clone 项目的url,就可以将项目克隆到在文件夹1里

步骤4:设置贡献者（当提交时，别人知道是你提交的）

git config --global user.name 用户名   
git config --global user.email 邮箱     
git config --list 查看所有配置项


master是主分支的默认名字

git的三个区（工作区，暂存区，版本区(库)）版本区分为本地仓库，远程仓库

工作区：文件夹中能看到的那一块

暂存区：作为过渡层，避免误操作，保护工作区和版本区，分支处理

版本区(库)：分为远程仓库，本地仓库


6：Git命令
git status 查看工作区和暂存区的工作状态，（文件名称为红色时候证明当前在工作区，如果颜色为绿色，证明当前在暂存区）

git add 文件名称 将某个文件添加到暂存区
git add . 将修改的所有文件全部提交到暂存区/将工作区修改的全部提交到暂存区

git commit 文件提交到本地仓库
git commit 最后一次提交的注释信息 以及如何退出git bash vim编辑器
今天用git commit -m “注释”提交的时候，注释写错了，于是各种查资料开始了和git bash vim的纠缠。。。（网上的资料我真是没操作成功，不过最后还是摸索出来了）

首先 使用 git commit --amend 命令，（修改最近一次提交的注释信息），会进入到vim 编辑器

然后 你会发现编辑器里你怎么输入都没反应，这是因为vim处在不可编辑状态，按下字母键 c，此时进入编辑状态，可以开始修改注释信息了
在然后 你会发现你怎么都退出不了，回到shell了，然后操作如下： ESC  --》 退出编辑状态；接着 连续按两次大写字母键 Z，接着你会惊喜的发现，终于保存好退出来了！

git commit -m  "注释"   文件提交到本地仓库

git commit -a -m "注释"  文件直接从工作区提交到本地仓库 -a就相当于从工作区到暂存区


7：git 对比

git diff  工作区和暂存区之间的差异对比

git diff --cached（--staged）  暂存区与版本区的差异对比

git diff 分支名称    工作区和版本区之间的差异对比

8：git 撤销


git reset HEAD 文件名   将暂存区中的某个文件还原回工作区（清空缓冲区）

git checkout -- 文件名  （工作区的文件现在改变了，现在想把版本区的文件还原回工作区的，此时暂存区没有内容）

思考：如果暂存区有内容，执行git checkout -- 文件名 这条命令的时候，会将暂存区的内容还原回工作区，而不再从版本区还原回工作区


git commit --amend (如果同时修改文件1和文件2，当提交完文件1，突然想同时提交文件1和文件2，先git add 文件2，然后将上次提交撤销回来然后再一起提交文件1和2，git commit -m "注释" --amend)


9：git log 查看每次提交到版本区的结果（谁，在什么时候提交的） 按“q”键退出

10：git 删除

git rm 文件名 （当一个文件提交到暂存区，误操作删除工作区的文件后，如果想删除暂存区中的文件，使用这条命令。但是当工作区不删除文件，直接执行命令，那命令不起作用。）

git rm -f 文件名  直接删除工作区和暂存区中的这个文件

git rm --cached 文件名   只会删除暂存区中的文件，工作区的文件不删除


11：git 恢复

git checkout [commit的Id] 想要恢复的那个文件针对单个“文件”   
比如：误删除一个1.js,用git log打印出commit日志，执行git checkout [commit的Id] 1.js 就恢复到最新版本的1.js

git reset --hard [commit的Id]   这是恢复到整个“版本”

git reset --hard HEAD^       这是恢复到往前的一个“版本”

git reset --hard HEAD~2       回到当前版本前面的第2个版本

git reflog           打开每次版本的操作记录（commit的备注）


12：同步到远程仓库（从本地仓库提交到远程仓库）


git remote  可以查看远程仓库的名字

git remote add  可以修改远程仓库的名字

git push [远程仓库的名字] [分支名称]  例如：git push origin master

13：多人协作解决冲突（当多人协作时候，别人提交到远程仓库，自己不需要clone了。）

问题：当多人协作时候，别人提交到远程仓库（githup），自己不知道，也没有git pull，自己也修改代码了，然后add,然后commit,最后提交到远程仓库。怎么解决？

git fetch直接将远程仓库拉取到本地，手动选择是否合并；

git diff master origin/master  查看本地仓库和远程仓库的区别；

git merge origin/master   手动合并本地与远程仓库的代码；

git pull 直接将远程仓库拉取到本地，跟自己已经修改的代码合并；


14 -- 开源项目协作（修改别人代码。例如修改jquery，在别人没邀请你加入项目时）

fork,分支（先找到那个人的githup账号，找到其中的项目，然后点击“fork”。打一个分支出来）

然后clone到自己的电脑（本地仓库）

改完后，在自己的githup上点击“Pull requests”,下一步点击“New pull requests”,下一步点击“Creat pull requests”












15 -- git 的分支处理

git branch                 查看当前有的分支

git branch 分支1           创建出一个“名称1”的分支

git checkout 分支1         切换到“名称1”的分支不是master了

git checkout -b 分支2      快速创建一个“分支2”出来，并且切换到“分支2”上

git merge 分支1（打出来的分支） 如果想让master分支，与修改后的分支1合并，首先切换到master分支上，然后输入：git merge 分支1

git branch --merged  查询当前分支和他合并的分支（例如：master分支已经和“分支一”合并，这个结果就是master，分支一）

git branch --no-merged  查询没有和当前分支合并的分支（例如：master分支已经和“分支一”合并，并没有和“分支二”合并，这个结果就是分支二）

git branch -d 分支一   删除分支一。因为分支一已经和主分支master合并了，所以分支一没用了，删除它。（没有的合并的分支，不能使用此命令删除）

git branch -D 分支一 (没有的合并的分支，使用强制手段删除)

16 -- 解决有冲突的分支

当master主分支，打出来分支1，然后修改master里的内容，最后commit提交到本地仓库，然后在分支1中修改同一个地方数据，最后想合并分支1和master，这时候有冲突，需要手动修改冲突的地方，在commit提交到本地仓库

17 -- 打标签

git tag 查看版本名称

git tag 名称 给当前版本打个标签

git push origin 标签名  将打好标签的版本同步到远程仓库




如何深入？
技巧
资源
http://git.oschina.net/progit/
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000









其他分支知识点：

1，获取 Git 仓库
有两种取得 Git 项目仓库的方法。 第一种是在现有项目或目录下导入所有文件到 Git 中； 第二种是从一个服务器克隆一个现有的 Git 仓库。

在现有目录中初始化仓库
如果你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入：

$ git init
该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。 (参见 Git 内部原理 来了解更多关于到底 .git 文件夹中包含了哪些文件的信息。)

如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。 你可通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交：

$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
稍后我们再逐一解释每一条指令的意思。 现在，你已经得到了一个实际维护（或者说是跟踪）着若干个文件的 Git 仓库。



问题：当我项目刚刚做到一半的时候，突然想用git来版本控制这个项目。

描述如下： 
1、我在本地已经有一个项目。 
2、开发到一半的时候我想用Git来管理这个项目。 
3、然后我在github上新建了一个项目 
4、那么我如何把本地的项目同新建的git关联起来？ 
我现在知道的办法是使用git clone下载空项目，然后把之前的项目拷过去，git add 然后 commit push

问题是：如果并不想移动或者改原有项目的文件名，可按以下步骤进行操作：

解决办法： 
git init 
git add . 
git commint -m “init” 
git remote add origin 你的github仓库地址 
git push 



如果要使用 git push简短提交代码：git push
1需要配置 :

git config --global push.default simple

或者：

git config --global push.default matching

区别在于，前者只提交你当前所在的分支，而后者会提交本地所有的分支。具体的自己去查一下就明白了





















